<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>

    <!--加载配置文件，为下面读取数据库信息准备-->
    <properties resource="application.properties"/>

    <context id="default" targetRuntime="MyBatis3" defaultModelType="flat">

        <!--用来指定通用Mapper对应的文件，这样我们生成的mapper都会继承这个通用Mapper-->
        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <property name="mappers" value="com.example.springboot.util.MyMapper"/>
            <!--caseSensitive默认false，当数据库表名区分大小写时，可以将该属性设置为true-->
            <!--<property name="caseSensitive" value="true"/>-->
        </plugin>

        <!--避免生成重复代码的插件-->
        <plugin type="com.example.springboot.config.OverIsMergeablePlugin"/>

        <!--是否在代码中显示注释-->
        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!--数据库链接地址账号密码-->
        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"
                        connectionURL="${spring.datasource.url}"
                        userId="${spring.datasource.username}"
                        password="${spring.datasource.password}">
        </jdbcConnection>

        <!--生成pojo类存放位置-->
        <javaModelGenerator targetPackage="com.example.springboot.entity" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!--生成xml映射文件存放位置-->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!--生成mapper类存放位置-->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.example.springboot.dao" targetProject="src/main/java">
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="true"/>
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="true"/>
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
        </javaClientGenerator>

        <!--生成对应表及类名-->
        <table tableName="sys_log">
            <columnOverride column="content" javaType="java.lang.String" jdbcType="VARCHAR"/>
        </table>
        <table tableName="sys_view">
            <columnOverride column="content" javaType="java.lang.String" jdbcType="VARCHAR"/>
        </table>
        <table tableName="tbl_article_content">
            <columnOverride column="content" javaType="java.lang.String" jdbcType="VARCHAR"/>
        </table>
        <table tableName="tbl_article_info">
            <columnOverride column="content" javaType="java.lang.String" jdbcType="VARCHAR"/>
        </table>
        <table tableName="tbl_article_message">
            <columnOverride column="content" javaType="java.lang.String" jdbcType="VARCHAR"/>
        </table>
        <table tableName="tbl_message">
            <columnOverride column="content" javaType="java.lang.String" jdbcType="VARCHAR"/>
        </table>
        <table tableName="tbl_sort_info">
            <columnOverride column="content" javaType="java.lang.String" jdbcType="VARCHAR"/>
        </table>
        <table tableName="tbl_article_sort">
            <columnOverride column="content" javaType="java.lang.String" jdbcType="VARCHAR"/>
        </table>

    </context>
</generatorConfiguration>